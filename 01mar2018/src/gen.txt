void MuTauTau::findGenInfo() {
  // Generator level information
  if (n_genparticle) {
    //if (_logOption >> 6 & 0x1) 
    //  _fLog << "indx    status    pdgId     eta      phi      pt     energy            mID                             dID"
    //        << endl;
    for (int indx = 0; indx < n_genparticle; ++indx) {
      const GenParticle* gp = dynamic_cast<GenParticle*>(genParticleA->At(indx));
      if (!gp) continue;
        
      // cout << "indx = " << indx << ", id=" << gp->pdgId << ", status = " << gp->status << endl;
     
      //looking for a Hadronic Tau whose mother is Higgs
      if (gp->status == 2 && abs(gp->pdgId)==15) {
	vector<int> m = gp->motherIndices;
	const GenParticle* mgp = dynamic_cast<GenParticle*>(genParticleA->At(m[0]));
	if (!mgp) continue;

	int pdgid = mgp->pdgId;
	if (abs(pdgid) == 15) {
	  vector<int> m2 = mgp->motherIndices;
	  const GenParticle* m2gp = dynamic_cast<GenParticle*>(genParticleA->At(m2[0]));
	  if (!m2gp) continue;
	  pdgid = m2gp->pdgId;
	  if (abs(pdgid)== 25) {
	    genHList.push_back(*m2gp);
	  }
	}
           
	if (abs(pdgid) != 25) continue;

	vector<int> d = gp->daughtIndices;
	for (size_t i = 0; i < d.size(); ++i) {
	  int di = d[i];
	  if (di >= n_genparticle) continue;
	  const GenParticle* dgp = dynamic_cast<GenParticle*>(genParticleA->At(di));
	  if (!dgp) continue;
	  if (abs(dgp->pdgId) == 16) continue;
	  if (abs(dgp->pdgId)!=11 && abs(dgp->pdgId)!=13 && abs(dgp->pdgId) !=12 && abs(dgp->pdgId) !=14 && dgp->pdgId !=22) {
	    //cout << "pId=" << gp->pdgId << ", dId=" << dgp->pdgId << endl;
	    genTauList.push_back(*gp);
	    break;
	  }
	}
      }


      // Looking for Muon whose mother is either W boson or Tau 
      if (gp->status == 1 && abs(gp->pdgId)== 13) {
	vector<int> m = gp->motherIndices;
	const GenParticle* mgp = dynamic_cast<GenParticle*>(genParticleA->At(m[0]));
	if (!mgp) continue;
	if (abs (mgp->pdgId)==15)
	  genMuobList.push_back(*gp);
	if (abs (mgp->pdgId)==24){
	  genMuoaList.push_back(*gp);
	  genWList.push_back(*mgp);
	}

	int mmid= mgp->pdgId;
	if (abs(mmid)==13){
	  vector<int> m2 = mgp->motherIndices;
	  const GenParticle* m2gp = dynamic_cast<GenParticle*>(genParticleA->At(m2[0]));
	  if (!m2gp) continue;
	  mmid = m2gp->pdgId;
	  if (abs(mmid)==15)
	    genMuobList.push_back(*gp);
	  if (abs(mmid)==24){
	    genWList.push_back(*m2gp);
	    genMuoaList.push_back(*gp);
	  }
	}
	if (abs(mmid)==24 || abs(mmid)==15)
	  genMuonList.push_back(*gp);
      }

      //looking for a Hadronic Tau whose mother is H-Boson
      if (gp->status == 2 && abs(gp->pdgId)==15) {
	vector<int> m = gp->motherIndices;
	const GenParticle* mgp = dynamic_cast<GenParticle*>(genParticleA->At(m[0]));
	if (!mgp) continue;

	int pdgid = mgp->pdgId;
	if (abs(pdgid) == 15) {
	  vector<int> m2 = mgp->motherIndices;
	  const GenParticle* m2gp = dynamic_cast<GenParticle*>(genParticleA->At(m2[0]));
	  if (!m2gp) continue;
	  pdgid = m2gp->pdgId;
	}
           
	if (abs(pdgid) != 25) continue;

	vector<int> d = gp->daughtIndices;
	for (size_t i = 0; i < d.size(); ++i) {
	  int di = d[i];
	  if (di >= n_genparticle) continue;
	  const GenParticle* dgp = dynamic_cast<GenParticle*>(genParticleA->At(di));
	  if (!dgp) continue;
	  if (abs(dgp->pdgId) == 16) continue;
	  if (abs(dgp->pdgId)!=11 && abs(dgp->pdgId)!=13 && abs(dgp->pdgId) !=12 && abs(dgp->pdgId) !=14 && dgp->pdgId !=22) {
	    //cout << "pId=" << gp->pdgId << ", dId=" << dgp->pdgId << endl;
	    genTau_H_List.push_back(*gp);
	    break;
	  }
	}
      }
      // Looking for 2 Muon whose mother is Z 
      if (gp->status == 1 && abs(gp->pdgId)== 13) {
	vector<int> m = gp->motherIndices;
	const GenParticle* mgp = dynamic_cast<GenParticle*>(genParticleA->At(m[0]));
	if (!mgp) continue;

	int mmid= mgp->pdgId;
	if (abs(mmid)==13){
	  vector<int> m2 = mgp->motherIndices;
	  const GenParticle* m2gp = dynamic_cast<GenParticle*>(genParticleA->At(m2[0]));
	  if (!m2gp) continue;
	  mmid = m2gp->pdgId;
	  if (abs (mmid)== 13) {
	    vector<int>m3 = m2gp->motherIndices;
	    const GenParticle* m3gp = dynamic_cast<GenParticle*>(genParticleA->At(m3[0]));
	    if (!m3gp) continue;
	    mmid = m3gp->pdgId;
	  }
	}
	if (abs(mmid)==23)
	  genMuon_Z_List.push_back(*gp);
      }

      //calculation of invariant mass in the generator level
      if(gp->status==1 && abs(gp->pdgId)== 13)
	GEN_MUON_LIST.push_back(*gp); 
    }
    //end of genParticle loop
    if (GEN_MUON_LIST.size()>1){
      sort (GEN_MUON_LIST.begin(), GEN_MUON_LIST.end(), PtComparator<GenParticle>());
      const GenParticle& mua1 = GEN_MUON_LIST[0];
      const GenParticle& mua2 = GEN_MUON_LIST[1];
      TLorentzVector x1, x2;
      x1.SetPtEtaPhiE (mua1.pt, mua1.eta, mua1.phi, mua1.energy);
      x2.SetPtEtaPhiE (mua2.pt, mua2.eta, mua2.phi, mua2.energy);
      TLorentzVector sum = x1+x2 ;
      double MASS = sum.M();
      AnaUtil::fillHist1D ("genInvMass", MASS, 1.0);
    }
    
    //AnaUtil::fillHist1D ("muon_count", genMuonList.size(), 1.0);  
    if (genMuonList.size() > 1) 
      sort(genMuonList.begin(), genMuonList.end(), PtComparator<GenParticle>());
    //      if (genMuonList.size() > 0) {
    //   double pt = genMuonList[0].pt;
    //  AnaUtil::fillHist1D ("genMuon_pt1", pt, 1.0);
    // }
    if (genTauList.size() > 1)
      sort(genTauList.begin(), genTauList.end(), PtComparator<GenParticle>());
    if (genMuoaList.size() > 1)
      sort(genMuoaList.begin(), genMuoaList.end(), PtComparator<GenParticle>());
    if (genMuobList.size() > 1)
      sort(genMuobList.begin(), genMuobList.end(), PtComparator<GenParticle>());
    if (genHList.size() > 1)
      sort(genHList.begin(), genHList.end(), PtComparator<GenParticle>());
    if (genWList.size() > 1)
      sort(genWList.begin(), genWList.end(), PtComparator<GenParticle>());
 
    if (genMuonList.size()>1 && genTauList.size()>0){         
      const GenParticle& muona=genMuonList[0];
      const GenParticle& muonb=genMuonList[1];
      const GenParticle& taua =genTauList[0];
      if (muona.pt<15) return;
      if (muonb.pt<10) return;
      TLorentzVector v1,v2,t1;
      v1.SetPtEtaPhiE (muona.pt, muona.eta, muona.phi, muona.energy);
      v2.SetPtEtaPhiE (muonb.pt, muonb.eta, muonb.phi, muonb.energy);
      t1.SetPtEtaPhiE (taua.pt , taua.eta , taua.phi , taua.energy );
      TLorentzVector z= v1+v2;
      double mass= z.M();
      if (mass < 20) return;
      double mva_gen= z.Pt()/(v1.Pt()+v2.Pt());
      
      AnaUtil::fillHist1D("mva_gen", mva_gen, 1.0);
      AnaUtil::fillHist2D("muon_correlation", v1.Pt(), v2.Pt(), 1.0);
      AnaUtil::fillHist1D("oddInvMass",mass, 1.0);
    }
    if (genMuoaList.size()>0 && genMuobList.size()>0 && genTauList.size()>0) {
      TLorentzVector M1,M2,W1,H1,t1;
      M1.SetPtEtaPhiE (genMuoaList[0].pt, genMuoaList[0].eta, genMuoaList[0].phi, genMuoaList[0].energy);
      M2.SetPtEtaPhiE (genMuobList[0].pt, genMuobList[0].eta, genMuobList[0].phi, genMuobList[0].energy);
      W1.SetPtEtaPhiE (genWList[0].pt, genWList[0].eta, genWList[0].phi, genWList[0].energy);
      H1.SetPtEtaPhiE (genHList[0].pt, genHList[0].eta, genHList[0].phi, genHList[0].energy);
      t1.SetPtEtaPhiE (genTauList[0].pt, genTauList[0].eta, genTauList[0].phi, genTauList[0].energy);
      AnaUtil::fillHist1D("WH_DR", AnaUtil::deltaR(W1, H1), 1.0);
      AnaUtil::fillHist1D("Ht1_DR",AnaUtil::deltaR(t1, H1), 1.0);
      AnaUtil::fillHist1D("HM2_DR",AnaUtil::deltaR(M2, H1), 1.0);
      AnaUtil::fillHist1D("WM1_DR",AnaUtil::deltaR(M1, W1), 1.0);
      AnaUtil::fillHist1D("t1M2_DR",AnaUtil::deltaR(t1,M2), 1.0);
      AnaUtil::fillProfile("WH_Wpt",W1.Pt(),AnaUtil::deltaR(W1, H1), 1.0);
      AnaUtil::fillProfile("t1M2_Hpt",H1.Pt(),AnaUtil::deltaR(t1,M2), 1.0);
      AnaUtil::fillProfile("WM1_Wpt", W1.Pt(),AnaUtil::deltaR(W1,M1), 1.0);
      AnaUtil::fillHist1D("DPhi_WH",AnaUtil::deltaPhi(W1,H1), 1.0);
      AnaUtil::fillHist1D("DEta_WH",W1.Eta()-H1.Eta(), 1.0);
      AnaUtil::fillHist1D("DPhi_t1M2",AnaUtil::deltaPhi(t1,M2), 1.0);
      AnaUtil::fillHist1D("DEta_t1M2",t1.Eta()-M2.Eta(), 1.0);
    }
  }
}
